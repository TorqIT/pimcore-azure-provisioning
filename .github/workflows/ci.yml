name: Deploy and test changes in an Azure environment

on:
  pull_request:

concurrency: 
  group: ${{ github.repository }}__${{ github.ref }}-ci
  cancel-in-progress: true

jobs:
  deploy-and-test-in-azure: 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build and start container, and log in to Azure
        uses: ./.github/actions/build-start-and-login
        with:
          TAG: ${{ github.head_ref || github.ref_name }}
          DOCKER_COMPOSE_FILE: ./.ci/docker-compose.yml
          PARAMETERS_FILE: ./.ci/parameters.json
          SERVICE_PRINCIPAL_ID: ${{ vars.SERVICE_PRINCIPAL_ID }}
          SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}

      - name: Deploy changes to the Azure environment
        id: deploy
        run: |
          docker compose \
            --file .ci/docker-compose.yml \
            exec azure \
              ./provision.sh parameters.json

      - name: Cancel Azure deployment if the deploy step failed or was cancelled
        # TODO this condition does not work
        if: steps.deploy.outcome == 'failure' || steps.deploy.outcome == 'cancelled'
        run: |
          touch .env
          RESOURCE_GROUP=$(jq -r '.parameters.resourceGroupName.value' .ci/parameters.json) >> .env
          docker compose \
            --file .ci/docker-compose.yml \
            exec azure \
              az deployment group cancel \
                --resource-group $RESOURCE_GROUP \
                --name main

      # TODO pull latest skeleton
      # - name: Pull latest skeleton
      #   uses: actions/checkout@v4
      #   with:
      #     repository: TorqIT/pimcore-skeleton
      #     ref: 2024.x
      #     path: skeleton

      # TODO build and push skeleton images to CR (only on first deploy though)

      - name: Tear down Azure resources when PR is closed
        if: github.event.action == 'closed'
        run: |
          touch .env
          echo "Deleting Resource Group..."
          RESOURCE_GROUP=$(jq -r '.parameters.resourceGroupName.value' .ci/parameters.json) >> .env
          docker compose \
            --file .ci/docker-compose.yml \
            exec azure \
              az group delete \
                --name $RESOURCE_GROUP \
                --yes
          echo "Purging Key Vault..."
          KEY_VAULT=$(jq -r '.parameters.keyVaultName.value' .ci/parameters.json) >> .env
          docker compose \
            --file .ci/docker-compose.yml \
            exec azure \
              az keyvault purge \
                --name $KEY_VAULT